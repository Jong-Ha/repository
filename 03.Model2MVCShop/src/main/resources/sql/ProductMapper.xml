<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
				
<mapper namespace="ProductMapper">

  	<resultMap type="com.model2.mvc.service.domain.Product" id="productSelectMap">
  		<result property="manuDate"		column="manufacture_day"	jdbcType="VARCHAR"/>
  		<result property="price"		column="price"				jdbcType="NUMERIC"/>
  		<result property="prodDetail"	column="prod_detail"		jdbcType="VARCHAR"/>
  		<result property="prodName"		column="prod_name"			jdbcType="VARCHAR"/>
  		<result property="prodNo"		column="prod_no"			jdbcType="NUMERIC"/>
  		<result property="regDate"		column="reg_date"			jdbcType="DATE"/>
  		<result property="rowNum"		column="row_num"			jdbcType="VARCHAR"/>
  		<result property="amount"		column="amount"				jdbcType="NUMERIC"/>
  		<result property="proTranCode"	column="tran_code"			jdbcType="VARCHAR"/>
  		<result property="prodGrade"	column="prod_grade"			jdbcType="NUMERIC"/>
  		<association property="mainFile" resultMap="fileResultMap"/>
  		<collection property="extraFileList" 	column="prod_no" ofType="file" select="getExtraFile"/>
  	</resultMap>
  	
  	<resultMap type="file" id="fileResultMap">
		<id property="refKey" 			column="ref_key" 		jdbcType="NUMERIC"/>
		<result property="fileName" 		column="file_name" 		jdbcType="VARCHAR"/>
		<result property="originalFileName"	column="original_name" 	jdbcType="VARCHAR"/>
		<result property="path" 			column="path" 			jdbcType="VARCHAR"/>
		<result property="size" 			column="file_size" 		jdbcType="NUMERIC"/>
		<result property="imageType" 		column="image_type" 	jdbcType="NUMERIC"/>
		<result property="target" 			column="target" 		jdbcType="VARCHAR"/>
  	</resultMap>
  	
  	<select id="getExtraFile" resultMap="fileResultMap">
  		SELECT ref_key, file_name, original_name, path, file_size, image_type, target
  		FROM files
  		WHERE ref_key = #{prod_no} AND image_type = 'extra' AND target = 'product'
  	</select>
  	
  	<select id="getProduct" parameterType="int" resultMap="productSelectMap">
  		SELECT
  		p.manufacture_day, p.price, p.prod_detail, p.prod_name, p.prod_no, p.reg_date, p.amount, ROUND(AVG(r.grade),1) AS prod_grade, f.file_name, f.original_name, f.path, f.file_size, f.image_type, f.target
  		FROM product p, review r, (	SELECT 
  									ref_key, file_name, original_name, path, file_size, image_type, target
  									FROM files
  									WHERE image_type = 'main' AND target = 'product'
  								  ) f
  		<where>
  			p.prod_no = #{prodNo}
			AND p.prod_no = r.prod_no(+)
			AND p.prod_no = f.ref_key(+)
  		</where>
  		GROUP BY p.manufacture_day, p.price, p.prod_detail, p.prod_name, p.prod_no, p.reg_date, p.amount, f.file_name, f.original_name, f.path, f.file_size, f.image_type, f.target
  	</select>
  	
  	<insert id="addProduct" parameterType="product">
  		INSERT
  		INTO product(manufacture_day, price, prod_detail, prod_name, prod_no, reg_date, amount)
  		VALUES(	#{manuDate:VARCHAR},
  				#{price:INTEGER},
  				#{prodDetail:VARCHAR},
  				#{prodName:VARCHAR},
  				seq_product_prod_no.NEXTVAL,
  				SYSDATE,
  				#{amount:INTEGER}
  				)
  	</insert>
  	
  	<update id="updateProduct" parameterType="product">
  		UPDATE product
  		<set>
  			prod_name = #{prodName:VARCHAR},
  			prod_detail = #{prodDetail:VARCHAR},
  			manufacture_day = #{manuDate:VARCHAR},
  			price = #{price:INTEGER},
  			amount = #{amount:INTEGER},
  		</set>
  		<where>
  			prod_no = #{prodNo}
  		</where>
  	</update>
  	
  	<update id="updateProductAmount" parameterType="purchase">
  		UPDATE product
  		<set>
  			amount = amount - #{amount:INTEGER}
  		</set>
  		<where>
  			prod_no = #{purchaseProd.prodNo}
  		</where>
  	</update>
  	
  	<sql id="getProductListSql">
  		SELECT
  		p.manufacture_day, p.price, p.prod_detail, p.prod_name, p.prod_no, p.reg_date, p.amount, ROUND(AVG(r.grade),1) AS prod_grade, f.file_name, f.original_name, f.path, f.file_size, f.image_type, f.target
  		FROM product p, review r, (	SELECT 
  									ref_key, file_name, original_name, path, file_size, image_type, target
  									FROM files
  									WHERE image_type = 'main' AND target = 'product'
  								  ) f
  		<where>
  			<if test="searchKeyword!=null and searchKeyword!=''">
  				<choose>
  					<when test="searchCondition==0">
  						p.prod_name LIKE ('%'||#{searchKeyword}||'%')
  					</when>
  					<when test="searchCondition==1">
  						p.prod_no = #{searchKeyword}
  					</when>
  					<otherwise>
  						p.prod_name LIKE ('%'||#{searchKeyword}||'%')
  					</otherwise>
  				</choose>
  			</if>
			<if test="checkSoldOut=='soldOut'">
				AND p.amount > 0
			</if>
			<if test="maxPrice!=0">
				AND p.price &lt;= #{maxPrice}
			</if>
			<if test="minPrice!=0">
				AND p.price >= #{minPrice}
			</if>
			AND p.prod_no = r.prod_no(+)
			AND p.prod_no = f.ref_key(+)
  		</where>
  		GROUP BY p.manufacture_day, p.price, p.prod_detail, p.prod_name, p.prod_no, p.reg_date, p.amount, f.file_name, f.original_name, f.path, f.file_size, f.image_type, f.target
  		ORDER BY 	<choose>
  						<when test="prodListCondition==0">
  							p.reg_date DESC
  						</when>
  						<when test="prodListCondition==1">
  							p.price DESC
  						</when>
  						<when test="prodListCondition==2">
  							p.price ASC
  						</when>
  						<when test="prodListCondition==3">
  							prod_grade DESC NULLS LAST
  						</when>
  						<when test="prodListCondition==4">
  							prod_grade ASC NULLS LAST
  						</when>
  						<otherwise>
  							p.reg_date DESC
  						</otherwise>
  					</choose>
  	</sql>
  	
  	<select id="getTotalCount" parameterType="com.model2.mvc.common.Search" resultType="int">
  		SELECT COUNT(*) FROM (
  		<include refid="getProductListSql"/>
  		)
  	</select>
  	
  	<select id="getProductList" parameterType="com.model2.mvc.common.Search" resultMap="productSelectMap">
  		SELECT * FROM (
  			SELECT ROWNUM row_num, vt.* FROM (
  				<include refid="getProductListSql"/>
  			) vt
  			WHERE ROWNUM &lt;= #{currentPage}*#{pageSize}
  		)
  		<where>
  			row_num >= ((#{currentPage}-1)*#{pageSize}+1)
  		</where>
  	</select>
  	
</mapper>